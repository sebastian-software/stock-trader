---
alwaysApply: true
---

# Routing & Project Structure

- Use React Router 7+ in Framework Mode with file-based routes exclusively; never use traditional BrowserRouter or manual route declaration. Follow file route conventions from the official docs ([Framework Mode](https://reactrouter.com/start/modes#framework), [File Route Conventions](https://reactrouter.com/how-to/file-route-conventions)).
- Implement the `app/` directory structure with `root.tsx` as the root layout component.
- Use the `@react-router/dev/vite` plugin for Vite integration.
- Keep routes as glue code; delegate to features that implement functionality.
- Keep feature folders self-contained; avoid deep nesting; prefer a flat structure when there are fewer than 10 files.
- Keep one item per file; do not mix components and hooks/utilities in the same file.
- Keep assets, Storybook stories, and Vitest tests co-located with their component.
- Prefer routing over manual state; use routes for tabs and dialogs.
- Implement error boundaries on each route.
- Prefer route-level code splitting: file-based routes are split automatically; avoid importing heavy feature modules at the app root; lazy-load dialogs and tabs via nested routes or dynamic `import()` when opened.
- Use `_index.tsx` for index routes and follow React Router 7 naming conventions strictly.
