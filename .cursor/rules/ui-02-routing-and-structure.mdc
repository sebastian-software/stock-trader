---
alwaysApply: true
---

# Routing & Project Structure

- Use **React Router Framework Mode** with **file-based routes**; do not declare routes manually. Follow file route conventions from the official docs ([Framework Mode](https://reactrouter.com/start/modes#framework), [File Route Conventions](https://reactrouter.com/how-to/file-route-conventions))
- Keep routes as **glue code**; delegate to **features** which implement functionality
- Keep **feature folders** self-contained; avoid deep nesting; prefer a **flat** structure when fewer than 10 files
- Keep **one item per file**; do not mix components and hooks/utilities in the same file
- Keep Storybook stories and Vitest tests co-located with their component
- Prefer **routing over manual state**; use routes for **tabs** and **dialogs**
- Implement **error boundaries** on **each route**
- Prefer **route-level code splitting**: file-based routes are split automatically; avoid importing heavy feature modules at the app root; lazy-load dialogs/tabs via nested routes or dynamic `import()` when opened
