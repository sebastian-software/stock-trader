---
alwaysApply: true
---

# Dependency Management

- Use latest versions by default: install packages with latest versions unless specific version requirements exist; use `pnpm add package@latest` or `pnpm update --latest` for updates.
- Use caret ranges (`^`) for dependencies: allow patch and minor updates automatically; pin exact versions only for packages with known breaking changes in minor releases.
- Enable automated dependency updates: use tools like Renovate or Dependabot to keep dependencies current; configure automated PRs for dependency updates.
- Prefer ESM packages that are tree-shakeable: require `"sideEffects": false` (or equivalent) and per-feature entry points (e.g., `pkg/feature`).
- Ban global side effects: no global CSS, no implicit polyfills, and no DOM or global mutations at module top level. Prefer ponyfills and explicit initializers.
- Enforce small imports: a single feature import should generally be under 5 kB gzip. Anything over ~10â€“15 kB needs a clear justification and lazy loading.
- Ensure first-class TypeScript: published types included; avoid community `@types` when possible. Avoid `any`-heavy APIs.
- Require SSR/browser safety: packages must not assume `window`/`document` at import time and must work in NodeJS/SSR targets.
- Import only what you use: prefer named, per-module imports; avoid star imports and barrels that pull entire packages.
- Do not import third-party `*.css`/`*.scss` directly from `node_modules`; style locally.
- Maintain compatibility: target our supported browsers and Node version; prefer dual ESM/CJS builds or ESM-first with clear guidance. Avoid CJS-only packages.
- Governance and security: check license, maintenance cadence, and issue velocity; review security advisories before updating; avoid packages with postinstall scripts.
- Deduplicate: avoid multiple versions of the same dependency; use overrides/resolutions to keep one copy.
- Measure and verify: run a bundle analyzer regularly; reject or reconfigure dependencies that regress size or prevent tree-shaking.
- Avoid barrel files in application code; they are only allowed in libraries.
- Update regularly: run `pnpm update --latest` monthly or when adding new dependencies; resolve peer dependency warnings promptly.
