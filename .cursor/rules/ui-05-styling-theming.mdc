---
alwaysApply: true
---

# Styling & Theming

- Use [Vanilla Extract](https://vanilla-extract.style) for styling React components only; never use Vanilla Extract for global styles.
- Use actual CSS files for global styles, resets, and design tokens with CSS custom properties and `@layer` directives.
- Avoid utility-first CSS frameworks (e.g., TailwindCSS, UnoCSS, Windi CSS).
- Avoid CSS preprocessors (e.g., Sass/SCSS) and PostCSS pipelines. Allow [Lightning CSS](https://lightningcss.dev) for static CSS processing.
- Base the color scheme on `oklch` color space exclusively.
- Compute color shades dynamically using CSS color functions from base hues; never hardcode individual shade values.
- Use CSS custom properties (e.g., `--color-primary-500: oklch(62% 0.25 var(--hue-primary))`) for all design tokens.
- Prefer semantic tokens (e.g., `--color-bg-primary`) over raw color values.
- Provide light/dark themes using CSS custom property overrides in `[data-theme='dark']` selectors.
- Implement layering rules and tokens (e.g., z-index scale) using CSS custom properties.
- Use a layered CSS approach starting with actual CSS files for layered CSS reset; do not use legacy `normalize.css`/`reset.css` or CSS-in-TS for resets (see [Mayank](https://mayank.co/blog/css-reset-layer/)).
- Structure CSS layers in order: `@layer reset, tokens, base, components, utilities`.
- Implement responsive typography: scale the root font size between approximately 16px and 20px based on viewport width using `clamp()`; differentiate mobile (≈320–720px) and desktop (≈960–1680px). Ensure the scaling is mathematically well defined and common resolutions produce stable sizing.
- Enable advanced OpenType features when beneficial (e.g., [TODS](https://github.com/clagnut/TODS)).
- Follow readability guidelines: target line length within recommended ranges and use unitless line-height that adapts by context (see [Baymard](https://baymard.com/blog/line-length-readability)).
- Reference CSS custom properties in Vanilla Extract styles using `var()` functions (e.g., `color: "var(--color-primary-500)"`).
- Define all color hues as base values and compute all shades from them; avoid static color palettes.
